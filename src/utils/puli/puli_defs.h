#pragma once

#include <stdio.h>
#include <stdlib.h>
#include <stdint.h>
#include <stdbool.h>
#include <string.h>
#include <errno.h>

#ifndef __GNUC__
	#if SIZE_MAX == UINT32_MAX
		typedef int32_t ssize_t;
		#define SSIZE_MAX INT32_MAX
	#else
		typedef int64_t ssize_t;
		#define SSIZE_MAX INT64_MAX
	#endif
#endif

typedef enum PuliError {
	P_OK,
// ERRNO codes
	P_ERROR_OPERATION_DENIED,
	P_ERROR_NOT_FOUND,
	P_ERROR_PROCESS_NOT_FOUND,
	P_ERROR_SYSCALL_INTERRUPTED,
	P_ERROR_IO_FAILURE,
	P_ERROR_DEVICE_NOT_FOUND,
	P_ERROR_ARGUMENT_LIST_TOO_LONG,
	P_ERROR_EXEC_FORMAT_ERROR,
	P_ERROR_BAD_FILE,
	P_ERROR_NO_CHILD_PROCESS,
	P_ERROR_TRY_AGAIN,
	P_ERROR_OUT_OF_MEMORY,
	P_ERROR_PERMISSION_DENIED,
	P_ERROR_ACCESS_DENIED = P_ERROR_PERMISSION_DENIED,
	P_ERROR_BAD_ADDRESS,
	P_ERROR_BLOCK_DEVICE_REQUIRED,
	P_ERROR_DEVICE_BUSY,
	P_ERROR_ALREADY_EXISTS,
	P_ERROR_CROSS_DEVICE_LINK,
	P_ERROR_NO_SUCH_DEVICE,
	P_ERROR_NOT_A_DIRECTORY,
	P_ERROR_NOT_A_FILE,
	P_ERROR_INVALID_ARGUMENT,
	P_ERROR_FILE_TABLE_OVERFLOW,
	P_ERROR_TOO_MANY_OPEN_FILES,
	P_ERROR_NOT_A_TYPEWRITER,
	P_ERROR_TEXT_FILE_BUSY,
	P_ERROR_FILE_TOO_BIG,
	P_ERROR_NO_FREE_SPACE,
	P_ERROR_ILLEGAL_SEEK,
	P_ERROR_READ_ONLY,
	P_ERROR_TOO_MANY_LINKS,
	P_ERROR_BROKEN_PIPE,
	P_ERROR_ARGUMENT_OUT_OF_DOMAIN,
	P_ERROR_OUT_OF_RANGE,
#ifndef _WIN32
	P_ERROR_DEADLOCK,
	P_ERROR_NAME_TOO_LONG,
	P_ERROR_NO_LOCK_AVAILABLE,
	P_ERROR_INVALID_SYSCALL,
	P_ERROR_DIRECTORY_NOT_EMPTY,
	P_ERROR_TOO_MAY_SYMLINKS,
#endif

// Library specific errors
	P_ERROR_STRING_EMPTY = 256,
	P_ERROR_BUFFER_IS_FULL
} PuliError;
typedef PuliError perror_t; // Alias for Boom